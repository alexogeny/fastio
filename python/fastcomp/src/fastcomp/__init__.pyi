from typing import Optional, Protocol

BytesLike = bytes | bytearray | memoryview

class _Compressor(Protocol):
    def update(self, data: BytesLike) -> bytes: ...
    def finish(self) -> bytes: ...

class GzipCompressor:
    def __init__(self, level: int = ...) -> None: ...
    def update(self, data: BytesLike) -> bytes: ...
    def finish(self) -> bytes: ...

class BrotliCompressor:
    def __init__(self, level: int = ...) -> None: ...
    def update(self, data: BytesLike) -> bytes: ...
    def finish(self) -> bytes: ...

class ZstdCompressor:
    def __init__(self, level: int = ...) -> None: ...
    def update(self, data: BytesLike) -> bytes: ...
    def finish(self) -> bytes: ...

def gzip_compress(data: BytesLike, level: int = ...) -> bytes: ...

def gzip_decompress(data: BytesLike) -> bytes: ...

def brotli_compress(data: BytesLike, level: int = ...) -> bytes: ...

def brotli_decompress(data: BytesLike) -> bytes: ...

def zstd_compress(data: BytesLike, level: int = ...) -> bytes: ...

def zstd_decompress(data: BytesLike) -> bytes: ...
